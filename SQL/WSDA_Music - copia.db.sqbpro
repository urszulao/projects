<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/jose5/Documents/Urszula/Ex_Files_SQL_EssT/Exercise Files/WSDA_Music.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3930"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainArtist"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="219"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="147"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="83"/><column index="2" value="71"/><column index="3" value="83"/><column index="4" value="294"/><column index="5" value="264"/><column index="6" value="132"/><column index="7" value="44"/><column index="8" value="96"/><column index="9" value="80"/><column index="10" value="128"/><column index="11" value="122"/><column index="12" value="183"/><column index="13" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employee" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="82"/><column index="2" value="71"/><column index="3" value="71"/><column index="4" value="124"/><column index="5" value="75"/><column index="6" value="129"/><column index="7" value="129"/><column index="8" value="178"/><column index="9" value="67"/><column index="10" value="44"/><column index="11" value="60"/><column index="12" value="80"/><column index="13" value="115"/><column index="14" value="115"/><column index="15" value="168"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="83"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="80"/><column index="7" value="96"/><column index="8" value="116"/><column index="9" value="53"/></column_widths><filter_values><column index="9" value="1.98"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="94"/><column index="2" value="68"/><column index="3" value="56"/><column index="4" value="65"/><column index="5" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="145"/><column index="3" value="61"/><column index="4" value="90"/><column index="5" value="59"/><column index="6" value="190"/><column index="7" value="84"/><column index="8" value="77"/><column index="9" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_AvgTotal" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_Tracks_InvoicesLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="65"/><column index="3" value="64"/><column index="4" value="134"/><column index="5" value="204"/><column index="6" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- This is the comment

/* 
Created by: Urszula Szczepanska
Created date: 26/10/2023
Descripton: This is the structure of a basci QUERY

*/
</sql><sql name="SQL 2">/*
Created by: Urszula Szczepanska
Created date: 26/10/2023
Descripton: This query displayes all custumers first, last names and email addresses
*/
SELECT
	FirstName AS[Customer First Name], 
	LastName AS'Customer Last Name',	
	Email AS EMAIL
FROM
	Customer
ORDER BY
	FirstName ASC,
	LastName DESC
/*
ASC - asendic ORDER
DESC - DESENDIC ORDER
*/
LIMIT 10</sql><sql name="SQL 3">/*
Created by: Urszula Szczepanska
Created date: 26/10/2023
Descripton: This query displayes all custumers who purchased two songs at $0.99
			How many invoices were biller in cities that start with B?
			How many invoices were billed on 2010-05-22 00:00:00?
			Get all invoices were billed after 2010-05-22 and have a total of less than 3.00?
			Get all invoices who's billing city starts with P or starts with D
			Get all invoices that are greater than 1.98 from any cities whoes name start with P or with D?
*/
-- % is wild card character /I dont care what comes next/
--PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction
--BEMDAS - Brackets, Exponents, Multiplication/Division, Addition/Subtraction

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	Invoice
WHERE
--	total = 1.98
--	total BETWEEN 1.98 AND 5.00
--	total IN(1.98, 3.96)
--	BillingCity ='Brussels'
--	BillingCity IN('Brussels','Orlando','Paris')
--	BillingCity LIKE'B%'
--	BillingCity LIKE'%B%'
--	InvoiceDate='2010-05-22 00:00:00'
--	DATE(InvoiceDate)='2010-05-22'
--	DATE(InvoiceDate)&gt;'2010-05-22' AND total &lt; 3
--	BillingCity LIKE'D%' OR BillingCity LIKE'P%' 
-- WRONG!!!!  BillingCity LIKE'D%' OR BillingCity LIKE'P%' AND total&gt;1.98 WRONG!!!
--	BillingCity LIKE'D%' AND total&gt;1.98 OR BillingCity LIKE'P%' AND total&gt;1.98
	(BillingCity LIKE'D%' OR BillingCity LIKE'P%') AND total&gt;1.98
ORDER BY
	InvoiceDate
</sql><sql name="SQL 4">/*
Created by: Urszula Szczepanska
Created date: 26/10/2023
Descripton: WSDA Music Sales Goal: 
			They want as meny costumers as possible to spend between $7.00 and $15.00
			
			Sales categories:
			Baseline Purchase - 	Between 0.99 and 1.99
			Low Purchase - 	Between 2.00 and 6.99
			Target Purchase -	Between 7.00 and 15.00
			Top Performer - 	Above 15.00
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total,
	CASE
	WHEN total&lt;2.00 THEN 'Baseline Purchased'
	WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
	WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
	ELSE 'TOP Performer'
	END AS PurchaseType
	
FROM
	Invoice
WHERE
	PurchaseType='TOP Performer'
ORDER BY
	InvoiceDate
</sql><sql name="SQL 5">/*
Created by: Urszula Szczepanska
Created date: 27/10/2023
Descripton: JOINS
*/
-- The star symbol, or asterisk (*), returns all columns

SELECT
	C.LastName,
	C.FirstName,
	I.InvoiceId,
	I.CustomerId,
	I.InvoiceDate,
	I.total
FROM
	Invoice AS I
INNER JOIN
	Customer AS C
ON
	I.CustomerId = C.CustomerId
ORDER BY 
	C.CustomerId
/*WHERE
	PurchaseType='TOP Performer'
ORDER BY
	InvoiceDate
*/</sql><sql name="SQL 6">/*
Created by: Urszula Szczepanska
Created date: 27/10/2023
Descripton: JOINS
*/
-- The star symbol, or asterisk (*), returns all columns

SELECT
	C.LastName,
	C.FirstName,
	I.InvoiceId,
	I.CustomerId,
	I.InvoiceDate,
	I.total
FROM
	Invoice AS I
LEFT OUTER JOIN
	Customer AS C
ON
	I.CustomerId = C.CustomerId
/*
SELECT
	C.LastName,
	C.FirstName,
	I.InvoiceId,
	I.CustomerId,
	I.InvoiceDate,
	I.total
FROM
	Customer AS C
LEFT OUTER JOIN
	Invoice AS I
ON
	C.CustomerId = I.CustomerId
*/</sql><sql name="SQL7">/*
Created by: Urszula Szczepanska
Created date: 27/10/2023
Descripton: JOINS on the more tham two tables | What employees are responsible for the 10 heighest individual sales?
*/

SELECT
	C.LastName,
	C.FirstName,
	C.SupportRepId,
	I.CustomerId,
	I.total,
	E.EmployeeId,
	E.LastName,
	E.FirstName

FROM
	Invoice AS I
INNER JOIN
	Customer AS C
ON
	I.CustomerId = C.CustomerId
INNER JOIN
	Employee AS E
ON 
	C.SupportRepId = E.EmployeeId
ORDER BY
	I.total DESC
LIMIT 10
</sql><sql name="SQL8">/*
Created by: Urszula Szczepanska
Created date: 27/10/2023
Descripton: Create a Mailing List of US Customers
*/

SELECT
	LastName,
	FirstName,
	Address,
	FirstName ||' '|| LastName ||' '||  Address ||' , '|| City ||' '||  State ||' '||  PostalCode AS [Mailing Adress],
	length(PostalCode),
	SUBSTR(PostalCode, 1,5) AS [5 Digit Postal Code],

	UPPER(firstname) AS [First Name All caps],

	LOWER(LastName) AS [Last Name All Lower]
FROM
	Customer 
WHERE
	Country = 'USA'

</sql><sql name="SQL9">/*
Created by: Urszula Szczepanska
Created date: 2/11/2023
Descripton: Calculate the ages of all Employees
*/

SELECT
	LastName,
	FirstName,
	BirthDate,

	strftime('%Y-%m-%d',Birthdate) AS [BirthDate no TImecode],

	strftime('%Y-%m-%d','now') - strftime('%Y-%m-%d',Birthdate) AS Age
FROM
	Employee 

</sql><sql name="SQL10">/*
Created by: Urszula Szczepanska
Created date: 2/11/2023
Descripton: Aggregate Function | What are our all time global sales?

Nesting Function - A function contained within another function  EXAMPLE FROG from ParkFrog in the field text0 will be UPPER(substr(text05,4))

Nested QUERY - A query wrapped inside of another query
*/

SELECT
	SUM(total) AS [Total Sales],

	round(AVG(total),2) AS [Average Sales],

	MAX(total) AS [Maximmum Sales],

	MIN(total) AS [Miniumum Sales],

	COUNT(*) AS [Sales Count]
FROM
	Invoice

</sql><sql name="SQL11">/*
Created by: Urszula Szczepanska
Created date: 2/11/2023
Descripton: Grouping in SQL | What are the average invoice totals by city?

Descripton: Grouping in SQL | What are the average invoice totals by city FOR ONLY THE CITIES THAT START WITH L? WEHERE Clause for filtering non aggregate data

Descripton: Grouping in SQL | What are the average invoice totals greater then $5?.00?  HAVING Clause for filtering results containing aggregate data

Descripton: Grouping in SQL | What are the average invoice totals greater then $5?.00 FOR CITIES STARTING WITH B?

Descripton: Grouping by more than one field at the time in SQL | What are the average invoice by billing country and city totals greater then $6?.00 ?
*/



SELECT

	BillingCountry,

	BillingCity,

	round(AVG(TOTAL),2)	AS [AVERAGE TOTAL]

FROM

	Invoice

--WHERE

--	BillingCity LIKE'L%'

GROUP BY

	BillingCountry, BillingCity

HAVING 

	avg(total)&gt;6

ORDER BY

	BillingCountry

</sql><sql name="SQL12">/*
Created by: Urszula Szczepanska
Created date: 2/11/2023

Descripton: Subquery | Gather data about all invoices that are less than this average? Outer Query - Inner Query [(select AVG(total) from Invoice)] - Outer Query
*/





SELECT

	InvoiceDate,

	BillingAddress,

	BillingCity,

	total

FROM

	Invoice

WHERE

	total &lt;

		(select AVG(total) from Invoice)

ORDER BY

	total DESC</sql><sql name="SQL 13">/* 

Created By: Urszula Szczepanska

Create Date: 02/1122023

Description: Subqueries in the SELECT |♥ How is each individual city performin against the global average sales?

*/



SELECT

	BillingCity,

	round(AVG(total),2) AS [City Average],

	(select round(AVG(total),2) from Invoice) AS [Global Average]

FROM

	Invoice

Group BY 

	BillingCity

ORDER BY

	BillingCity

</sql><sql name="SQL 14">/* 

Created By: Urszula Szczepanska

Create Date: 02/1122023

Description: Subqueries without Agregate function

*/



SELECT

	InvoiceDate,

	BillingAddress,

	BillingCity

FROM

	Invoice

WHERE

	InvoiceDate &gt;

(SELECT

	InvoiceDate

FROM

	Invoice

WHERE

	InvoiceId = 251)



</sql><sql name="SQL 15">/* 

Created By: Urszula Szczepanska

Create Date: 02/1122023

Description: Returning multiple vaues from a subquery

*/



SELECT

	InvoiceDate,

	BillingAddress,

	BillingCity

FROM

	Invoice

WHERE

	InvoiceDate IN 

(SELECT

	InvoiceDate

FROM

	Invoice

WHERE

	InvoiceId IN (251, 252, 254))



</sql><sql name="SQL 16">/* 

Created By: Urszula Szczepanska

Create Date: 02/1122023

Description: Subqueries and DISTINCT | Whichtracks are not selling

*/

SELECT

	TrackId,

	Composer,

	Name

FROM 

	Track

WHERE

	TrackId

NOT IN

(SELECT	

	DISTINCT

	TrackId

FROM

	InvoiceLine

ORDER BY 

	TrackId)

</sql>